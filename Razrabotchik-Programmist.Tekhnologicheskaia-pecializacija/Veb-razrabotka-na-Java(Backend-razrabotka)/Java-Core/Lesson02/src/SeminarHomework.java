/**
 * Класс SeminarHomework содержит методы для выполнения различных задач
 * с массивами, таких как подсчет четных элементов, вычисление разницы
 * между максимальным и минимальным элементами, а также проверка на наличие
 * двух соседних нулевых элементов в массиве.
 */
public class SeminarHomework {

    /**
     * Метод подсчитывает количество четных элементов в переданном массиве целых чисел.
     *
     * @param nums Массив целых чисел.
     * @return Количество четных чисел в массиве.
     *
     * Описание работы метода:
     * - Перебираем каждый элемент массива и проверяем, является ли число четным.
     * - Если число делится на 2 без остатка, увеличиваем счетчик четных чисел.
     * - Возвращаем общее количество четных элементов.
     *
     * Пример:
     * countEvens([2, 1, 2, 3, 4]) → 3
     * countEvens([2, 2, 0]) → 3
     * countEvens([1, 3, 5]) → 0
     */
    public int countEvens(int[] nums) {
        int countEvenNums = 0;
        for (int num : nums) {
            if (num % 2 == 0) {
                countEvenNums++;
            }
        }
        return countEvenNums;
    }

    /**
     * Метод возвращает разницу между самым большим и самым маленьким элементами
     * в переданном не пустом массиве целых чисел.
     *
     * @param nums Массив целых чисел (не должен быть пустым).
     * @return Разница между максимальным и минимальным элементами массива.
     *
     * Описание работы метода:
     * - Инициализируем переменные для минимального и максимального значений первым элементом массива.
     * - Перебираем массив и обновляем минимальные и максимальные значения по мере прохождения элементов.
     * - После завершения перебора возвращаем разницу между максимальным и минимальным значениями.
     *
     * Пример:
     * maxMinDifference([10, 3, 5, 6]) → 7 (максимум 10, минимум 3, разница 7)
     * maxMinDifference([7, 2, 10, 9]) → 8 (максимум 10, минимум 2, разница 8)
     */
    public int maxMinDifference(int[] nums) {
        int min = nums[0];
        int max = nums[0];

        for (int num : nums) {
            if (num < min) {
                min = num;
            }
            if (num > max) {
                max = num;
            }
        }

        return max - min;
    }

    /**
     * Метод проверяет, содержит ли переданный массив два соседних элемента с нулевым значением.
     *
     * @param nums Массив целых чисел.
     * @return true, если в массиве есть два соседних нуля, иначе false.
     *
     * Описание работы метода:
     * - Перебираем массив, начиная с первого элемента и до предпоследнего.
     * - Проверяем, равны ли текущий элемент и следующий элемент нулю.
     * - Если находим пару соседних нулей, возвращаем true.
     * - Если до конца массива пара не найдена, возвращаем false.
     *
     * Пример:
     * hasTwoConsecutiveZeros([1, 0, 0, 2]) → true
     * hasTwoConsecutiveZeros([1, 2, 3, 0, 4]) → false
     * hasTwoConsecutiveZeros([0, 0, 0]) → true
     */
    public boolean hasTwoConsecutiveZeros(int[] nums) {
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] == 0 && nums[i + 1] == 0) {
                return true;
            }
        }
        return false;
    }
}

"""
Вы стажируетесь в лаборатории искусственного интеллекта, в ней вам
поручили разработать класс Matrix для обработки и анализа данных. Ваш класс
должен предоставлять функциональность для выполнения основных операций
с матрицами, таких как сложение, вычитание, умножение и транспонирование.
Это будет полезно для обработки и структурирования больших объёмов
данных, которые используются в обучении нейронных сетей.
Задача
1. Создайте класс Matrix для работы с матрицами.
Реализуйте методы:
○ сложения,
○ вычитания,
○ умножения,
○ транспонирования матрицы.
2. Создайте несколько экземпляров класса Matrix и протестируйте
реализованные операции.
Советы
● Методы сложения/вычитания/умножения должны получать параметром
другую матрицу (объект класса Matrix) и выполнять указанное действие
над своей и этой другой матрицей. Например, метод сложения должен
получить параметром новую матрицу и сложить её со своей текущей.
● Метод транспонирования не должен ничего получать, он должен
работать исключительно со своей матрицей.
● Транспонирование — это алгоритм, при котором строки матрицы
меняются местами с её столбцами:
● Алгоритм транспонирования матрицы можно расписать следующим
образом:
1. Создать новую матрицу result с размерами, обратными размерам
исходной матрицы. Количество строк новой матрицы равно
количеству столбцов исходной, а количество столбцов новой
матрицы равно количеству строк исходной.
2. Пройтись по каждому элементу исходной матрицы. Для каждого
элемента с индексами (i, j):
1. Поместить значение этого элемента (i, j) в ячейку с
индексами (j, i) новой матрицы. То есть транспонирование
происходит с помощью обмена индексов местами.
2. После завершения цикла новая матрица result будет
содержать транспонированную матрицу, которую можно
вернуть.
Пример:
# Создание экземпляров класса Matrix
m1 = Matrix(2, 3)
m1.data = [[1, 2, 3], [4, 5, 6]]
m2 = Matrix(2, 3)
m2.data = [[7, 8, 9], [10, 11, 12]]
# Тестирование операций
print("Матрица 1:")
print(m1)
print("Матрица 2:")
print(m2)
print("Сложение матриц:")
print(m1.add(m2))
print("Вычитание матриц:")
print(m1.subtract(m2))
m3 = Matrix(3, 2)
m3.data = [[1, 2], [3, 4], [5, 6]]
print("Умножение матриц:")
print(m1.multiply(m3))
print("Транспонирование матрицы 1:")
print(m1.transpose())
Вывод
Матрица 1:
1 2 3
4 5 6
Матрица 2:
7 8 9
10 11 12
Сложение матриц:
8 10 12
14 16 18
Вычитание матриц:
-6 -6 -6
-6 -6 -6
Умножение матриц:
22 28
49 64
Транспонирование матрицы 1:
1 4
2 5
3 6
"""

class Matrix:
    def __init__(self, rows, cols):
        """Инициализация матрицы с заданным количеством строк и столбцов."""
        self.rows = rows
        self.cols = cols
        self.data = [[0] * cols for _ in range(rows)]  # Инициализация матрицы нулями

    def __str__(self):
        """Метод для строкового представления матрицы."""
        return "\n".join(" ".join(map(str, row)) for row in self.data)

    def add(self, other):
        """Сложение текущей матрицы с другой матрицей."""
        if self.rows != other.rows or self.cols != other.cols:
            raise ValueError("Матрицы должны быть одинакового размера для сложения.")
        result = Matrix(self.rows, self.cols)
        for i in range(self.rows):
            for j in range(self.cols):
                result.data[i][j] = self.data[i][j] + other.data[i][j]
        return result

    def subtract(self, other):
        """Вычитание другой матрицы из текущей."""
        if self.rows != other.rows or self.cols != other.cols:
            raise ValueError("Матрицы должны быть одинакового размера для вычитания.")
        result = Matrix(self.rows, self.cols)
        for i in range(self.rows):
            for j in range(self.cols):
                result.data[i][j] = self.data[i][j] - other.data[i][j]
        return result

    def multiply(self, other):
        """Умножение текущей матрицы на другую матрицу."""
        if self.cols != other.rows:
            raise ValueError("Количество столбцов первой матрицы должно быть равно количеству строк второй матрицы.")
        result = Matrix(self.rows, other.cols)
        for i in range(self.rows):
            for j in range(other.cols):
                result.data[i][j] = sum(self.data[i][k] * other.data[k][j] for k in range(self.cols))
        return result

    def transpose(self):
        """Транспонирование текущей матрицы."""
        result = Matrix(self.cols, self.rows)
        for i in range(self.rows):
            for j in range(self.cols):
                result.data[j][i] = self.data[i][j]
        return result

# Пример использования
m1 = Matrix(2, 3)
m1.data = [[1, 2, 3], [4, 5, 6]]
m2 = Matrix(2, 3)
m2.data = [[7, 8, 9], [10, 11, 12]]

print("Матрица 1:")
print(m1)

print("Матрица 2:")
print(m2)

# Сложение матриц
print("Сложение матриц:")
print(m1.add(m2))

# Вычитание матриц
print("Вычитание матриц:")
print(m1.subtract(m2))

# Умножение матриц
m3 = Matrix(3, 2)
m3.data = [[1, 2], [3, 4], [5, 6]]
print("Умножение матриц:")
print(m1.multiply(m3))

# Транспонирование матрицы
print("Транспонирование матрицы 1:")
print(m1.transpose())
